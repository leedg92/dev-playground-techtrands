input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${HOST}:${PORT}/${DATABASE}"
    jdbc_user => "${USER}"
    jdbc_password => "${PASSWORD}"
    statement => "
    SELECT
        id,
        item_type,
        text_content,
        sentiment_score,
        sentiment_label,
        extracted_keyword,
        author,
        created_at,
        score,
        parent_id,
        root_story_id
    FROM
        tech_trends.tech_trends_items
    WHERE
        created_at > :sql_last_value
    ORDER BY created_at ASC
    "
    schedule => "*/1 * * * *" # 10분 마다 실행
    use_column_value => true
    tracking_column => "created_at"
    tracking_column_type => "timestamp"
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
  }
}

filter {
  # 날짜 형식 변환
  date {
    match => [ "created_at", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss" ]
    target => "@timestamp"
  }
  
  # sentiment_label을 sentiment_category로 복사 (통일성을 위해)
  if [sentiment_label] {
    mutate { 
      add_field => { "sentiment_category" => "%{sentiment_label}" }
    }
  }
  
  # 게시글/댓글 구분
  if [parent_id] and [parent_id] != 0 {
    mutate { add_field => { "content_type" => "comment" } }
  } else {
    mutate { add_field => { "content_type" => "post" } }
  }
  
  # 텍스트 길이 추가
  if [text_content] {
    ruby {
      code => "event.set('text_length', event.get('text_content').length)"
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "tech_trends_items"
    user => ""
    password => ""
    document_id => "%{id}"  # 중복 방지
  }
  stdout { codec => json_lines }
}